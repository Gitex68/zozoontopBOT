const { SlashCommandBuilder, PermissionFlagsBits, AttachmentBuilder } = require('discord.js');
const EmbedManager = require('../../utils/embedManager');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('logsexport')
        .setDescription('Exporte les logs du serveur sur une p√©riode donn√©e')
        .addIntegerOption(option =>
            option.setName('duree')
                .setDescription('Dur√©e √† exporter')
                .setRequired(true)
                .setMinValue(1)
                .setMaxValue(720)
        )
        .addStringOption(option =>
            option.setName('unite')
                .setDescription('Unit√© de temps')
                .setRequired(true)
                .addChoices(
                    { name: 'Heures', value: 'heures' },
                    { name: 'Jours', value: 'jours' }
                )
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    
    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });
            
            const logsSystem = interaction.client.logsSystem;
            if (!logsSystem) {
                return await interaction.editReply({
                    embeds: [EmbedManager.createErrorEmbed(
                        'Erreur',
                        'Le syst√®me de logs n\'est pas initialis√©.'
                    )]
                });
            }

            if (!logsSystem.config.logsChannelId) {
                return await interaction.editReply({
                    embeds: [EmbedManager.createErrorEmbed(
                        'Logs non configur√©s',
                        'Le syst√®me de logs n\'est pas encore configur√©. Utilisez `/logssetup` d\'abord.'
                    )]
                });
            }

            const duree = interaction.options.getInteger('duree');
            const unite = interaction.options.getString('unite');
            
            let timeValue, timeUnit, timeInMs;
            
            if (unite === 'heures') {
                timeValue = duree;
                timeUnit = 'heures';
                timeInMs = duree * 60 * 60 * 1000;
                
                // Validation pour les heures (max 720 = 30 jours)
                if (duree > 720) {
                    return await interaction.editReply({
                        embeds: [EmbedManager.createErrorEmbed(
                            'Dur√©e trop importante',
                            'Le maximum pour les heures est de 720 (30 jours).'
                        )]
                    });
                }
            } else {
                timeValue = duree;
                timeUnit = 'jours';
                timeInMs = duree * 24 * 60 * 60 * 1000;
                
                // Validation pour les jours (max 30)
                if (duree > 30) {
                    return await interaction.editReply({
                        embeds: [EmbedManager.createErrorEmbed(
                            'Dur√©e trop importante',
                            'Le maximum pour les jours est de 30.'
                        )]
                    });
                }
            }

            const endDate = new Date();
            const startDate = new Date(endDate.getTime() - timeInMs);

            // Exporter les logs
            const exportData = logsSystem.exportLogs(startDate, endDate);
            
            if (exportData === 'Aucun log trouv√© pour cette p√©riode.') {
                return await interaction.editReply({
                    embeds: [EmbedManager.createWarningEmbed(
                        'Aucun log trouv√©',
                        `Aucun √©v√©nement n'a √©t√© trouv√© dans les ${timeValue} derni√®res ${timeUnit}.`
                    )]
                });
            }

            // Cr√©er le fichier
            const buffer = Buffer.from(exportData, 'utf-8');
            const attachment = new AttachmentBuilder(buffer, { 
                name: `logs_${interaction.guild.name}_${timeValue}${timeUnit}_${new Date().toISOString().split('T')[0]}.txt` 
            });

            const embed = EmbedManager.createSuccessEmbed(
                'üìã Export des logs',
                `Export des logs des ${timeValue} derni√®res ${timeUnit} g√©n√©r√© avec succ√®s !`
            );

            embed.addFields(
                { name: '‚è∞ P√©riode', value: `${startDate.toLocaleString('fr-FR')} - ${endDate.toLocaleString('fr-FR')}`, inline: false },
                { name: 'üìä √âv√©nements export√©s', value: `${(exportData.match(/\[/g) || []).length} √©v√©nements`, inline: true },
                { name: 'üìÅ Taille du fichier', value: `${(buffer.length / 1024).toFixed(2)} KB`, inline: true }
            );

            await interaction.editReply({
                embeds: [embed],
                files: [attachment]
            });

            console.log(`‚úÖ Export des logs g√©n√©r√© par ${interaction.user.username} (${timeValue} ${timeUnit})`);

        } catch (error) {
            console.error('‚ùå Erreur lors de l\'export des logs:', error);
            
            const embed = EmbedManager.createErrorEmbed(
                'Erreur d\'export',
                'Une erreur est survenue lors de l\'export des logs.'
            );

            if (interaction.deferred) {
                await interaction.editReply({ embeds: [embed] });
            } else {
                await interaction.reply({ embeds: [embed], ephemeral: true });
            }
        }
    }
};
